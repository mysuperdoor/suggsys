# 合理化建议系统

## 系统简介

合理化建议系统是一个专门用于收集、审核、实施和管理部门班组员工合理化建议的平台。通过该系统，班组员工可以提交改进建议，管理人员可以进行审核，并跟踪和更新实施过程的状态，形成完整的合理化建议管理闭环。

## 前端页面结构

### 主要页面

1. **登录页面** (`/login`)
   - 用户登录

2. **仪表盘** (`/dashboard`)
   - 系统概览
   - 待办事项
   - 数据统计卡片

3. **建议相关页面**
   - 建议列表 (`/suggestions/list`)
   - 创建建议 (`/suggestions/new`)
   - 建议详情 (`/suggestions/:id`)
   - 建议审核 (`/suggestions/review`)
   - 实施跟踪 (`/suggestions/implementation`)

4. **报表页面** (`/reports`)
   - 建议类型分布
   - 建议状态分布
   - 班组统计
   - 实施效果分析

5. **管理页面**
   - 用户管理 (`/users`)
   - 系统设置

## 角色与权限

系统支持以下角色，各司其职：

| 角色 | 权限 |
|------|------|
| 班组人员 | 提交建议、查看自己的建议、撤回未审核的建议 |
| 值班主任 | 对本班组建议进行一级审核、查看本班组建议 |
| 安全科管理人员 | 对安全类建议进行二级审核、负责安全类建议实施的状态更新 |
| 运行科管理人员 | 对非安全类建议进行二级审核、负责非安全类建议实施的状态更新 |
| 部门经理 | 查看所有建议、管理用户(增加用户、修改用户、删除用户))、查看统计报表、为各条建议打分（1-5分），访问所有功能 |

## 系统工作流程

### 1. 建议提交流程

1. **建议创建**:
   - 员工登录系统后，可以创建并提交合理化建议
   - 填写建议标题、内容、类型等基本信息
   - 可以上传相关附件（图片、文档等）
   - 提交后建议状态为"待审核"

2. **一级审核**:
   - 值班主任对建议进行“一级审核”
   - 可以通过或退回建议
   - 通过后建议状态变为"一级审核通过"
   - 退回后建议状态变为"已退回"，员工可以修改后重新提交

3. **二级审核**:
   - 部门经理/安全管理人员进行“二级审核”
   - 审核通过后建议状态变为"已批准"，进入实施阶段
   - 审核不通过建议状态变为"已拒绝"，流程结束

### 2. 建议实施流程

   **实施流程**:
   - 建议审核通过后，状态变为"进入实施阶段"
   - 管理人员分配责任人，更新实施状态
   - 实施状态可以是：联系中，实施中，已完成，已取消
   - 实施状态的更新形成历史记录时间线
  


### 3. 状态流转图

```
提交 -> 待审核 -> 一级审核通过 -> 二级审核通过 -> 进入实施阶段 -> 联系中 -> 实施中 -> 已完成
   |         |           |
   |         |           └-> 已拒绝
   |         └-> 已退回
   └-> 已撤回
```


## 系统特性

1. **完整的建议生命周期管理**
   - 从提交、审核、实施的完整流程
   - 状态自动转换和历史记录

2. **精细的权限控制**
   - 基于角色的访问控制
   - 数据权限隔离（班组、类别）

3. **数据统计与可视化**
   - 多维度数据分析
   - 班组绩效对比
   - 趋势分析

4. **文件管理**
   - 支持多种格式文件上传
   - 文件类型验证
   - 文件安全性保障

5. **响应式界面**
   - 适配不同屏幕尺寸
   - 现代化UI设计



## 自定义建议类型与审核流程

### 1. 修改建议类型和中文描述

建议的类型代码（如 `SAFETY`）及其对应的中文名称（如 "安全管理"）在前端常量文件中定义。


-   **修改位置**: 找到 `SUGGESTION_TYPES` 常量对象。

// 建议类型
export const SUGGESTION_TYPES = {
  SAFETY: '调度安全类',
  ELECTRICAL: '设备电气类',
  MECHANICAL: '设备机械类',
  KEXIN_AUTOMATION: '科信自动化类',
  KEXIN_MONITORING: '科信监控类',
  OTHER: '其它类'
};

// 注意: 建议类型相关的颜色定义在 TYPE_COLORS 常量中，如需修改颜色请一并调整。
export const TYPE_COLORS = {
  SAFETY: 'volcano',
  // ... 其他类型颜色
};
```

-   **操作**:
    -   **修改描述**: 直接修改对象中类型代码对应的值（字符串）。
    -   **添加类型**: 在对象中添加新的 `键: 值` 对，键是类型代码（建议大写），值是中文描述。
    -   **删除类型**: 从对象中移除相应的 `键: 值` 对。
    -   **同步颜色**: 如果添加了新类型，记得在 `TYPE_COLORS` 中为其指定颜色。

### 2. 修改安全类别的审核流转逻辑

当前系统中，"安全类别"建议的处理逻辑分散在前端和后端：

#### a. 前端判断逻辑 (影响审核操作界面)

前端代码根据建议类型决定是否显示或触发特定的审核操作（例如，安全类建议需要二级审核）。

-   **查找内容**: 搜索涉及判断建议类型的代码，特别是与 `SAFETY` 类型相关的条件判断，例如可能存在的 `isSafetyType` 变量或直接比较 `record.type === 'SAFETY'` 的地方。这些判断通常用于控制是否启用二级审核按钮或显示相关提示。
-   **修改示例**: 如果你想让"智能化升级" (`AUTOMATION`) 类型也需要二级审核，你可能需要修改类似以下的逻辑：
    ```javascript
    // 伪代码示例 - 查找类似逻辑并修改
    // const needsSecondReview = record.type === 'SAFETY'; // 原逻辑
    const needsSecondReview = record.type === 'SAFETY' || record.type === 'AUTOMATION'; // 修改后逻辑
    ```
    你需要根据实际代码结构调整判断条件。

#### b. 后端默认视图逻辑 (影响安全科管理员看到的列表)

后端代码决定了"安全科管理人员"登录后默认看到的建议列表是经过筛选的（默认只看安全类）。


-   **函数**: `getSuggestions`
-   **修改位置**: 找到处理用户角色的 `if` / `else if` 语句块，特别是针对 `'安全科管理人员'` 的部分：

    } else if (req.user.role === '安全科管理人员' && !type) { // 只有在前端未指定类型时才应用角色默认类型
      // 安全科管理人员默认看到安全类的建议
      query.type = 'SAFETY'; // <--- 修改这里
    } else if (req.user.role === '运行科管理人员' && !type) {
    // ...
    ```
-   **操作**:
    -   如果你想让安全科管理员默认看到所有类型，可以移除或注释掉 `query.type = 'SAFETY';` 这一行。
    -   如果你想让他们默认看到安全类**和**其他某个类型（例如 `AUTOMATION`），可以将条件修改为 `query.type = { $in: ['SAFETY', 'AUTOMATION'] };`。

**重要提示**: 将核心业务规则（例如哪种类型的建议必须经过哪个审核流程）放在后端进行强制校验通常是更健壮的做法。目前的实现似乎将部分判断逻辑放在了前端，修改时请注意保持前后端逻辑的一致性，并考虑安全性。
