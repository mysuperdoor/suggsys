{"version":3,"file":"static/js/136.b433260a.chunk.js","mappings":"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","sources":["services/statisticsService.js","pages/Reports/DepartmentPerformance/index.jsx"],"sourcesContent":["import api from './api';\nimport { getAuthHeader } from '../utils/authUtils';\n\n// 使用直接定义的API基础URL，而不是从constants/config导入\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst statisticsService = {\n    // 获取部门统计数据\n    getDepartmentStats: async (startDate, endDate) => {\n        try {\n            console.log('发送部门统计数据请求，参数:', { startDate, endDate });\n            \n            const params = {};\n            if (startDate && endDate) {\n                params.startDate = startDate;\n                params.endDate = endDate;\n            }\n            \n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/department-stats', { params });\n            \n            console.log('获取部门统计数据响应:', response);\n            \n            // api.js 的响应拦截器已经处理了response.data，所以这里直接使用response\n            if (response && response.success && Array.isArray(response.data)) {\n                return {\n                    success: true,\n                    data: response.data\n                };\n            } else {\n                console.error('部门统计数据响应格式不正确:', response);\n                return {\n                    success: false,\n                    data: [],\n                    message: '数据格式不正确'\n                };\n            }\n        } catch (error) {\n            // 详细记录错误信息\n            console.error('获取部门统计数据失败:', error.message);\n            if (error.response) {\n                console.error('服务器响应:', error.response.status, error.response.data);\n            } else if (error.request) {\n                console.error('未收到响应，请求详情:', error.request);\n            }\n            \n            throw error;\n        }\n    },\n\n    // 获取班组内部统计数据\n    getTeamInternalStats: async (team, startDate, endDate) => {\n        try {\n            console.log('发送班组内部统计数据请求，参数:', { team, startDate, endDate });\n            \n            const params = { team };\n            if (startDate && endDate) {\n                params.startDate = startDate;\n                params.endDate = endDate;\n            }\n            \n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/team-internal-stats', { params });\n            \n            console.log('获取班组内部统计数据响应:', response);\n            \n            // api.js 的响应拦截器已经处理了response.data，所以这里直接使用response\n            if (response && response.success && Array.isArray(response.data)) {\n                return {\n                    success: true,\n                    data: response.data\n                };\n            } else {\n                console.error('班组内部统计数据响应格式不正确:', response);\n                return {\n                    success: false,\n                    data: [],\n                    message: '数据格式不正确'\n                };\n            }\n        } catch (error) {\n            // 详细记录错误信息\n            console.error('获取班组内部统计数据失败:', error.message);\n            if (error.response) {\n                console.error('服务器响应:', error.response.status, error.response.data);\n            } else if (error.request) {\n                console.error('未收到响应，请求详情:', error.request);\n            }\n            \n            throw error;\n        }\n    },\n\n    // 获取部门趋势数据\n    getDepartmentTrends: async (team, period = 'month') => {\n        try {\n            const params = { team, period };\n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/department-trends', { params });\n            return response;\n        } catch (error) {\n            console.error('获取部门趋势数据失败:', error);\n            throw error;\n        }\n    },\n    \n    // 检查统计API是否可用\n    checkApiStatus: async () => {\n        try {\n            // 先检查整体API健康状况\n            const healthResult = await api.checkHealth();\n            \n            if (!healthResult.success) {\n                return healthResult;\n            }\n            \n            // 再检查统计API是否可用\n            const statsResult = await api.get('/statistics/status', { \n                // 设置短超时，避免长时间等待\n                timeout: 5000,\n                // 避免显示重复错误消息\n                showErrorMessage: false\n            });\n            \n            return {\n                success: true,\n                status: statsResult.status,\n                message: statsResult.message,\n                time: statsResult.time\n            };\n        } catch (error) {\n            console.error('统计API状态检查失败:', error);\n            return {\n                success: false,\n                message: error.userMessage || '统计服务不可用'\n            };\n        }\n    }\n};\n\nexport default statisticsService; ","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, DatePicker, Table, message, Spin, Empty, Alert, Button, Space, Typography, Tooltip } from 'antd';\nimport { Bar, Line } from '@ant-design/charts';\nimport statisticsService from '../../../services/statisticsService';\nimport moment from 'moment';\nimport { ReloadOutlined, CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { RangePicker } = DatePicker;\nconst { Text } = Typography;\n\n// 预设时间范围\nconst presetRanges = {\n  '最近一个月': [moment().subtract(1, 'month'), moment()],\n  '最近三个月': [moment().subtract(3, 'months'), moment()],\n  '最近半年': [moment().subtract(6, 'months'), moment()],\n  '最近一年': [moment().subtract(1, 'year'), moment()],\n  '当年': [moment().startOf('year'), moment()]\n};\n\n// 模拟数据，用于在API无法返回数据时显示\nconst mockData = [\n    {\n        team: '机械班组',\n        totalSubmissions: 35,\n        approvalRate: 85.7,\n        implementationRate: 68.5,\n        userCount: 12,\n        perCapitaSubmissions: 2.9\n    },\n    {\n        team: '电气班组',\n        totalSubmissions: 42,\n        approvalRate: 78.6,\n        implementationRate: 59.5,\n        userCount: 15,\n        perCapitaSubmissions: 2.8\n    },\n    {\n        team: '仪表班组',\n        totalSubmissions: 28,\n        approvalRate: 92.8,\n        implementationRate: 75.0,\n        userCount: 10,\n        perCapitaSubmissions: 2.8\n    },\n    {\n        team: '安全班组',\n        totalSubmissions: 31,\n        approvalRate: 90.3,\n        implementationRate: 67.7,\n        userCount: 9,\n        perCapitaSubmissions: 3.4\n    },\n    {\n        team: '运行班组',\n        totalSubmissions: 48,\n        approvalRate: 83.3,\n        implementationRate: 72.9,\n        userCount: 20,\n        perCapitaSubmissions: 2.4\n    }\n];\n\nconst DepartmentPerformance = () => {\n    const [loading, setLoading] = useState(false);\n    const [statsData, setStatsData] = useState([]);\n    const [error, setError] = useState(null);\n    const [dateRange, setDateRange] = useState([\n        moment().subtract(1, 'month'),\n        moment().add(1, 'day')\n    ]);\n    const [useMockData, setUseMockData] = useState(false);\n    \n    // 添加API状态检查相关状态\n    const [apiStatus, setApiStatus] = useState({\n        checking: false,\n        available: null,\n        lastChecked: null,\n        message: null\n    });\n\n    // 检查API状态\n    const checkApiStatus = async () => {\n        try {\n            setApiStatus(prev => ({ ...prev, checking: true }));\n            const result = await statisticsService.checkApiStatus();\n            \n            setApiStatus({\n                checking: false,\n                available: result.success,\n                lastChecked: new Date(),\n                message: result.message || (result.success ? '统计API可用' : '统计API不可用')\n            });\n            \n            if (result.success) {\n                message.success('统计API连接成功');\n                // API可用，尝试重新加载数据\n                loadStats();\n            } else {\n                message.error('统计API连接失败');\n            }\n        } catch (error) {\n            setApiStatus({\n                checking: false,\n                available: false,\n                lastChecked: new Date(),\n                message: error.message || '检查API状态时出错'\n            });\n            message.error('检查API状态失败');\n        }\n    };\n\n    // 加载统计数据\n    const loadStats = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            const [start, end] = dateRange;\n            const response = await statisticsService.getDepartmentStats(\n                start.format('YYYY-MM-DD'),\n                end.format('YYYY-MM-DD')\n            );\n            \n            if (response.success && Array.isArray(response.data) && response.data.length > 0) {\n                setStatsData(response.data);\n                setUseMockData(false);\n                // 如果之前API不可用，但现在成功获取数据，更新API状态\n                if (apiStatus.available === false) {\n                    setApiStatus(prev => ({\n                        ...prev,\n                        available: true,\n                        lastChecked: new Date(),\n                        message: '统计API连接恢复'\n                    }));\n                }\n            } else {\n                console.log('API返回的数据为空或格式不正确，使用模拟数据', response);\n                setStatsData(mockData);\n                setUseMockData(true);\n                setError(`未能获取真实数据：${response.message || '数据为空'}`);\n                message.warning('无法从服务器获取数据，显示模拟数据');\n            }\n        } catch (error) {\n            console.error('加载统计数据失败:', error);\n            \n            let errorMessage = '获取报表数据失败';\n            if (error.response) {\n                errorMessage += `: ${error.response.status} - ${error.response.data?.message || '未知错误'}`;\n            } else if (error.request) {\n                errorMessage += ': 服务器未响应，请检查网络连接和服务器状态';\n                // API可能不可用，更新状态\n                setApiStatus({\n                    checking: false,\n                    available: false,\n                    lastChecked: new Date(),\n                    message: '服务器未响应'\n                });\n            } else {\n                errorMessage += `: ${error.message}`;\n            }\n            \n            setError(errorMessage);\n            setStatsData(mockData);\n            setUseMockData(true);\n            message.error('数据加载失败，显示模拟数据');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        loadStats();\n        // 初始检查API状态\n        checkApiStatus();\n    }, []);\n\n    useEffect(() => {\n        if (!loading) {\n            loadStats();\n        }\n    }, [dateRange]);\n\n    // 表格列配置\n    const columns = [\n        {\n            title: '班组/科室',\n            dataIndex: 'team',\n            key: 'team',\n        },\n        {\n            title: '提交总数',\n            dataIndex: 'totalSubmissions',\n            key: 'totalSubmissions',\n            sorter: (a, b) => a.totalSubmissions - b.totalSubmissions,\n        },\n        {\n            title: '通过率',\n            dataIndex: 'approvalRate',\n            key: 'approvalRate',\n            render: (val) => `${val ? val.toFixed(2) : 0}%`,\n            sorter: (a, b) => a.approvalRate - b.approvalRate,\n        },\n        {\n            title: '实施完成率',\n            dataIndex: 'implementationRate',\n            key: 'implementationRate',\n            render: (val) => `${val ? val.toFixed(2) : 0}%`,\n            sorter: (a, b) => a.implementationRate - b.implementationRate,\n        },\n        {\n            title: '班组得分总和',\n            dataIndex: 'totalScore',\n            key: 'totalScore',\n            sorter: (a, b) => (a.totalScore || 0) - (b.totalScore || 0),\n            render: (val) => (typeof val === 'number' ? val.toFixed(1) : '-'),\n        },\n    ];\n\n    // 柱状图配置\n    const barConfig = {\n        data: statsData,\n        xField: 'team',\n        yField: 'totalSubmissions',\n        label: {\n            position: 'top',\n        },\n        meta: {\n            team: {\n                alias: '班组/科室',\n            },\n            totalSubmissions: {\n                alias: '提交总数',\n            },\n        },\n        height: 220, // 减小图表高度\n    };\n\n    // 通过率和实施率对比图配置\n    const rateComparisonConfig = {\n        data: statsData.length > 0 ? statsData.map(item => [\n            {\n                team: item.team,\n                rate: item.approvalRate || 0,\n                type: '通过率'\n            },\n            {\n                team: item.team,\n                rate: item.implementationRate || 0,\n                type: '实施完成率'\n            }\n        ]).flat() : [],\n        xField: 'team',\n        yField: 'rate',\n        seriesField: 'type',\n        meta: {\n            rate: {\n                formatter: (v) => `${v}%`\n            }\n        },\n        height: 220, // 减小图表高度\n    };\n\n    const renderContent = () => {\n        if (loading) {\n            return <Spin tip=\"加载中...\" size=\"large\" style={{ marginTop: 60, display: 'flex', justifyContent: 'center' }} />;\n        }\n\n        if (error && !useMockData) {\n            return <Alert message={error} type=\"error\" style={{ marginTop: 15 }} />;\n        }\n\n        if (!statsData || statsData.length === 0) {\n            return <Empty description=\"暂无数据\" style={{ marginTop: 30 }} />;\n        }\n\n        return (\n            <Row gutter={[12, 12]}>\n                {(useMockData || error) && (\n                    <Col span={24}>\n                        <Alert\n                            message={useMockData ? \"当前显示的是模拟数据\" : \"数据加载出现问题\"}\n                            description={\n                                <div>\n                                    <p style={{ margin: '8px 0' }}>{error || '无法从服务器获取真实数据，当前显示的是模拟数据。'}</p>\n                                    <Space>\n                                        <Button \n                                            type=\"primary\" \n                                            size=\"small\"\n                                            icon={<ReloadOutlined />}\n                                            onClick={loadStats}\n                                            loading={loading}\n                                        >\n                                            重新加载数据\n                                        </Button>\n                                        <Button \n                                            type=\"link\" \n                                            size=\"small\"\n                                            onClick={checkApiStatus}\n                                            loading={apiStatus.checking}\n                                        >\n                                            检查API状态\n                                        </Button>\n                                    </Space>\n                                </div>\n                            }\n                            type=\"warning\"\n                            showIcon\n                            style={{ marginBottom: 12 }}\n                        />\n                    </Col>\n                )}\n                \n                <Col xs={24} lg={12}>\n                    <Card \n                        title={\n                            <Space>\n                                <span>建议提交数量</span>\n                                {apiStatus.available === true && (\n                                    <Text type=\"success\"><CheckCircleOutlined /> API可用</Text>\n                                )}\n                                {apiStatus.available === false && (\n                                    <Text type=\"danger\"><ExclamationCircleOutlined /> API不可用</Text>\n                                )}\n                            </Space>\n                        } \n                        size=\"small\"\n                        bordered={false}\n                        bodyStyle={{ padding: '8px' }}\n                        headStyle={{ padding: '8px 12px' }}\n                        extra={\n                            <Button \n                                icon={<ReloadOutlined />} \n                                onClick={loadStats}\n                                loading={loading}\n                                size=\"small\"\n                            >\n                                刷新\n                            </Button>\n                        }\n                    >\n                        <Bar {...barConfig} />\n                    </Card>\n                </Col>\n                <Col xs={24} lg={12}>\n                    <Card \n                        title=\"通过率和实施完成率对比\" \n                        size=\"small\"\n                        bordered={false}\n                        bodyStyle={{ padding: '8px' }}\n                        headStyle={{ padding: '8px 12px' }}\n                    >\n                        <Line {...rateComparisonConfig} />\n                    </Card>\n                </Col>\n                <Col span={24}>\n                    <Card \n                        title=\"详细数据\" \n                        size=\"small\"\n                        bordered={false}\n                        bodyStyle={{ padding: '8px' }}\n                        headStyle={{ padding: '8px 12px' }}\n                    >\n                        <Table\n                            columns={columns}\n                            dataSource={statsData}\n                            rowKey=\"team\"\n                            loading={loading}\n                            size=\"small\"\n                            pagination={false}\n                        />\n                    </Card>\n                </Col>\n            </Row>\n        );\n    };\n\n    return (\n        <div className=\"department-performance\" style={{ maxWidth: '1200px', margin: '0 auto' }}>\n            <Card \n                title=\"报表统计\" \n                size=\"small\"\n                bodyStyle={{ padding: '12px' }}\n                extra={\n                    <Space size=\"small\">\n                        <RangePicker\n                            value={dateRange}\n                            onChange={setDateRange}\n                            allowClear={false}\n                            ranges={presetRanges}\n                            size=\"small\"\n                        />\n                        <Button \n                            icon={<ReloadOutlined />} \n                            onClick={loadStats}\n                            loading={loading}\n                            size=\"small\"\n                        >\n                            刷新\n                        </Button>\n                    </Space>\n                }\n            >\n                {renderContent()}\n            </Card>\n        </div>\n    );\n};\n\nexport default DepartmentPerformance; "],"names":["getDepartmentStats","async","startDate","endDate","console","log","params","response","api","get","success","Array","isArray","data","error","message","status","request","getTeamInternalStats","team","getDepartmentTrends","period","arguments","length","undefined","checkApiStatus","healthResult","checkHealth","statsResult","timeout","showErrorMessage","time","userMessage","RangePicker","DatePicker","Text","Typography","presetRanges","moment","subtract","startOf","mockData","totalSubmissions","approvalRate","implementationRate","userCount","perCapitaSubmissions","DepartmentPerformance","loading","setLoading","useState","statsData","setStatsData","setError","dateRange","setDateRange","add","useMockData","setUseMockData","apiStatus","setApiStatus","checking","available","lastChecked","prev","result","statisticsService","Date","loadStats","start","end","format","warning","errorMessage","_error$response$data","useEffect","columns","title","dataIndex","key","sorter","a","b","render","val","toFixed","totalScore","barConfig","xField","yField","label","position","meta","alias","height","rateComparisonConfig","map","item","rate","type","flat","seriesField","formatter","v","_jsx","className","style","maxWidth","margin","children","Card","size","bodyStyle","padding","extra","_jsxs","Space","value","onChange","allowClear","ranges","Button","icon","ReloadOutlined","onClick","Spin","tip","marginTop","display","justifyContent","Alert","Row","gutter","Col","span","description","showIcon","marginBottom","xs","lg","CheckCircleOutlined","ExclamationCircleOutlined","bordered","headStyle","Bar","Line","Table","dataSource","rowKey","pagination","Empty"],"sourceRoot":""}