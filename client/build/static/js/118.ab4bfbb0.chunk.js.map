{"version":3,"file":"static/js/118.ab4bfbb0.chunk.js","mappings":"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","sources":["services/statisticsService.js","pages/Reports/TeamInternalReport/index.jsx"],"sourcesContent":["import api from './api';\nimport { getAuthHeader } from '../utils/authUtils';\n\n// 使用直接定义的API基础URL，而不是从constants/config导入\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst statisticsService = {\n    // 获取部门统计数据\n    getDepartmentStats: async (startDate, endDate) => {\n        try {\n            console.log('发送部门统计数据请求，参数:', { startDate, endDate });\n            \n            const params = {};\n            if (startDate && endDate) {\n                params.startDate = startDate;\n                params.endDate = endDate;\n            }\n            \n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/department-stats', { params });\n            \n            console.log('获取部门统计数据响应:', response);\n            \n            // api.js 的响应拦截器已经处理了response.data，所以这里直接使用response\n            if (response && response.success && Array.isArray(response.data)) {\n                return {\n                    success: true,\n                    data: response.data\n                };\n            } else {\n                console.error('部门统计数据响应格式不正确:', response);\n                return {\n                    success: false,\n                    data: [],\n                    message: '数据格式不正确'\n                };\n            }\n        } catch (error) {\n            // 详细记录错误信息\n            console.error('获取部门统计数据失败:', error.message);\n            if (error.response) {\n                console.error('服务器响应:', error.response.status, error.response.data);\n            } else if (error.request) {\n                console.error('未收到响应，请求详情:', error.request);\n            }\n            \n            throw error;\n        }\n    },\n\n    // 获取班组内部统计数据\n    getTeamInternalStats: async (team, startDate, endDate) => {\n        try {\n            console.log('发送班组内部统计数据请求，参数:', { team, startDate, endDate });\n            \n            const params = { team };\n            if (startDate && endDate) {\n                params.startDate = startDate;\n                params.endDate = endDate;\n            }\n            \n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/team-internal-stats', { params });\n            \n            console.log('获取班组内部统计数据响应:', response);\n            \n            // api.js 的响应拦截器已经处理了response.data，所以这里直接使用response\n            if (response && response.success && Array.isArray(response.data)) {\n                return {\n                    success: true,\n                    data: response.data\n                };\n            } else {\n                console.error('班组内部统计数据响应格式不正确:', response);\n                return {\n                    success: false,\n                    data: [],\n                    message: '数据格式不正确'\n                };\n            }\n        } catch (error) {\n            // 详细记录错误信息\n            console.error('获取班组内部统计数据失败:', error.message);\n            if (error.response) {\n                console.error('服务器响应:', error.response.status, error.response.data);\n            } else if (error.request) {\n                console.error('未收到响应，请求详情:', error.request);\n            }\n            \n            throw error;\n        }\n    },\n\n    // 获取部门趋势数据\n    getDepartmentTrends: async (team, period = 'month') => {\n        try {\n            const params = { team, period };\n            // 使用api实例而不是直接使用axios\n            const response = await api.get('/statistics/department-trends', { params });\n            return response;\n        } catch (error) {\n            console.error('获取部门趋势数据失败:', error);\n            throw error;\n        }\n    },\n    \n    // 检查统计API是否可用\n    checkApiStatus: async () => {\n        try {\n            // 先检查整体API健康状况\n            const healthResult = await api.checkHealth();\n            \n            if (!healthResult.success) {\n                return healthResult;\n            }\n            \n            // 再检查统计API是否可用\n            const statsResult = await api.get('/statistics/status', { \n                // 设置短超时，避免长时间等待\n                timeout: 5000,\n                // 避免显示重复错误消息\n                showErrorMessage: false\n            });\n            \n            return {\n                success: true,\n                status: statsResult.status,\n                message: statsResult.message,\n                time: statsResult.time\n            };\n        } catch (error) {\n            console.error('统计API状态检查失败:', error);\n            return {\n                success: false,\n                message: error.userMessage || '统计服务不可用'\n            };\n        }\n    }\n};\n\nexport default statisticsService; ","import React, { useState, useEffect } from 'react';\r\nimport { Card, Row, Col, DatePicker, Table, message, Spin, Empty, Alert, Button, Space, Typography, Tooltip, Select } from 'antd';\r\nimport { Bar, Line } from '@ant-design/charts';\r\nimport statisticsService from '../../../services/statisticsService';\r\nimport { authService } from '../../../services/authService';\r\nimport moment from 'moment';\r\nimport { ReloadOutlined, CheckCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Text } = Typography;\r\nconst { Option } = Select;\r\n\r\n// 预设时间范围\r\nconst presetRanges = {\r\n  '最近一个月': [moment().subtract(1, 'month'), moment()],\r\n  '最近三个月': [moment().subtract(3, 'months'), moment()],\r\n  '最近半年': [moment().subtract(6, 'months'), moment()],\r\n  '最近一年': [moment().subtract(1, 'year'), moment()],\r\n  '当年': [moment().startOf('year'), moment()]\r\n};\r\n\r\n// 模拟数据，用于在API无法返回数据时显示\r\nconst mockData = [\r\n    {\r\n        name: '张三',\r\n        totalSubmissions: 12,\r\n        approvalRate: 83.3,\r\n        implementationRate: 66.7,\r\n        totalScore: 36.5,\r\n    },\r\n    {\r\n        name: '李四',\r\n        totalSubmissions: 8,\r\n        approvalRate: 75.0,\r\n        implementationRate: 62.5,\r\n        totalScore: 24.2,\r\n    },\r\n    {\r\n        name: '王五',\r\n        totalSubmissions: 10,\r\n        approvalRate: 90.0,\r\n        implementationRate: 70.0,\r\n        totalScore: 31.8,\r\n    },\r\n    {\r\n        name: '赵六',\r\n        totalSubmissions: 6,\r\n        approvalRate: 66.7,\r\n        implementationRate: 50.0,\r\n        totalScore: 18.3,\r\n    },\r\n    {\r\n        name: '钱七',\r\n        totalSubmissions: 9,\r\n        approvalRate: 88.9,\r\n        implementationRate: 77.8,\r\n        totalScore: 29.4,\r\n    }\r\n];\r\n\r\nconst TeamInternalReport = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [statsData, setStatsData] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [dateRange, setDateRange] = useState([\r\n        moment().subtract(1, 'month'),\r\n        moment().add(1, 'day')\r\n    ]);\r\n    const [useMockData, setUseMockData] = useState(false);\r\n    const [currentTeam, setCurrentTeam] = useState(null);\r\n    const [userTeam, setUserTeam] = useState(null);\r\n    \r\n    // 添加API状态检查相关状态\r\n    const [apiStatus, setApiStatus] = useState({\r\n        checking: false,\r\n        available: null,\r\n        lastChecked: null,\r\n        message: null\r\n    });\r\n\r\n    // 获取当前用户所在班组\r\n    useEffect(() => {\r\n        const fetchUserTeam = async () => {\r\n            try {\r\n                const currentUser = await authService.getCurrentUser();\r\n                if (currentUser && currentUser.team) {\r\n                    setUserTeam(currentUser.team);\r\n                    setCurrentTeam(currentUser.team);\r\n                }\r\n            } catch (error) {\r\n                console.error('获取用户信息失败:', error);\r\n                message.error('获取用户班组信息失败');\r\n            }\r\n        };\r\n\r\n        fetchUserTeam();\r\n    }, []);\r\n\r\n    // 检查API状态\r\n    const checkApiStatus = async () => {\r\n        try {\r\n            setApiStatus(prev => ({ ...prev, checking: true }));\r\n            const result = await statisticsService.checkApiStatus();\r\n            \r\n            setApiStatus({\r\n                checking: false,\r\n                available: result.success,\r\n                lastChecked: new Date(),\r\n                message: result.message || (result.success ? '统计API可用' : '统计API不可用')\r\n            });\r\n            \r\n            if (result.success) {\r\n                message.success('统计API连接成功');\r\n                // API可用，尝试重新加载数据\r\n                loadStats();\r\n            } else {\r\n                message.error('统计API连接失败');\r\n            }\r\n        } catch (error) {\r\n            setApiStatus({\r\n                checking: false,\r\n                available: false,\r\n                lastChecked: new Date(),\r\n                message: error.message || '检查API状态时出错'\r\n            });\r\n            message.error('检查API状态失败');\r\n        }\r\n    };\r\n\r\n    // 加载统计数据\r\n    const loadStats = async () => {\r\n        if (!currentTeam) {\r\n            message.warning('未能获取班组信息');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const [start, end] = dateRange;\r\n            const response = await statisticsService.getTeamInternalStats(\r\n                currentTeam,\r\n                start.format('YYYY-MM-DD'),\r\n                end.format('YYYY-MM-DD')\r\n            );\r\n            \r\n            if (response.success && Array.isArray(response.data) && response.data.length > 0) {\r\n                setStatsData(response.data);\r\n                setUseMockData(false);\r\n                // 如果之前API不可用，但现在成功获取数据，更新API状态\r\n                if (apiStatus.available === false) {\r\n                    setApiStatus(prev => ({\r\n                        ...prev,\r\n                        available: true,\r\n                        lastChecked: new Date(),\r\n                        message: '统计API连接恢复'\r\n                    }));\r\n                }\r\n            } else {\r\n                console.log('API返回的数据为空或格式不正确，使用模拟数据', response);\r\n                setStatsData(mockData);\r\n                setUseMockData(true);\r\n                setError(`未能获取真实数据：${response.message || '数据为空'}`);\r\n                message.warning('无法从服务器获取数据，显示模拟数据');\r\n            }\r\n        } catch (error) {\r\n            console.error('加载统计数据失败:', error);\r\n            \r\n            let errorMessage = '获取报表数据失败';\r\n            if (error.response) {\r\n                errorMessage += `: ${error.response.status} - ${error.response.data?.message || '未知错误'}`;\r\n            } else if (error.request) {\r\n                errorMessage += ': 服务器未响应，请检查网络连接和服务器状态';\r\n                // API可能不可用，更新状态\r\n                setApiStatus({\r\n                    checking: false,\r\n                    available: false,\r\n                    lastChecked: new Date(),\r\n                    message: '服务器未响应'\r\n                });\r\n            } else {\r\n                errorMessage += `: ${error.message}`;\r\n            }\r\n            \r\n            setError(errorMessage);\r\n            setStatsData(mockData);\r\n            setUseMockData(true);\r\n            message.error('数据加载失败，显示模拟数据');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentTeam) {\r\n            loadStats();\r\n            // 初始检查API状态\r\n            checkApiStatus();\r\n        }\r\n    }, [currentTeam]);\r\n\r\n    useEffect(() => {\r\n        if (!loading && currentTeam) {\r\n            loadStats();\r\n        }\r\n    }, [dateRange, currentTeam]);\r\n\r\n    // 表格列配置\r\n    const columns = [\r\n        {\r\n            title: '员工姓名',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: '提交总数',\r\n            dataIndex: 'totalSubmissions',\r\n            key: 'totalSubmissions',\r\n            sorter: (a, b) => a.totalSubmissions - b.totalSubmissions,\r\n        },\r\n        {\r\n            title: '通过率',\r\n            dataIndex: 'approvalRate',\r\n            key: 'approvalRate',\r\n            render: (val) => `${val ? val.toFixed(2) : 0}%`,\r\n            sorter: (a, b) => a.approvalRate - b.approvalRate,\r\n        },\r\n        {\r\n            title: '实施完成率',\r\n            dataIndex: 'implementationRate',\r\n            key: 'implementationRate',\r\n            render: (val) => `${val ? val.toFixed(2) : 0}%`,\r\n            sorter: (a, b) => a.implementationRate - b.implementationRate,\r\n        },\r\n        {\r\n            title: '得分总和',\r\n            dataIndex: 'totalScore',\r\n            key: 'totalScore',\r\n            sorter: (a, b) => (a.totalScore || 0) - (b.totalScore || 0),\r\n            render: (val) => (typeof val === 'number' ? val.toFixed(1) : '-'),\r\n        },\r\n    ];\r\n\r\n    // 柱状图配置\r\n    const barConfig = {\r\n        data: statsData,\r\n        xField: 'name',\r\n        yField: 'totalSubmissions',\r\n        label: {\r\n            position: 'top',\r\n        },\r\n        meta: {\r\n            name: {\r\n                alias: '员工姓名',\r\n            },\r\n            totalSubmissions: {\r\n                alias: '提交总数',\r\n            },\r\n        },\r\n        height: 220, // 减小图表高度\r\n    };\r\n\r\n    // 通过率和实施率对比图配置\r\n    const rateComparisonConfig = {\r\n        data: statsData.length > 0 ? statsData.map(item => [\r\n            {\r\n                name: item.name,\r\n                rate: item.approvalRate || 0,\r\n                type: '通过率'\r\n            },\r\n            {\r\n                name: item.name,\r\n                rate: item.implementationRate || 0,\r\n                type: '实施完成率'\r\n            }\r\n        ]).flat() : [],\r\n        xField: 'name',\r\n        yField: 'rate',\r\n        seriesField: 'type',\r\n        meta: {\r\n            rate: {\r\n                formatter: (v) => `${v}%`\r\n            }\r\n        },\r\n        height: 220, // 减小图表高度\r\n    };\r\n\r\n    // 得分统计图配置\r\n    const scoreConfig = {\r\n        data: statsData,\r\n        xField: 'name',\r\n        yField: 'totalScore',\r\n        label: {\r\n            position: 'top',\r\n            style: {\r\n                fill: '#1890ff',\r\n            },\r\n            formatter: (v) => {\r\n                if (v && v.totalScore !== undefined && v.totalScore !== null) {\r\n                    return `${v.totalScore.toFixed(1)}`;\r\n                }\r\n                return '0.0';\r\n            },\r\n        },\r\n        meta: {\r\n            name: {\r\n                alias: '员工姓名',\r\n            },\r\n            totalScore: {\r\n                alias: '得分总和',\r\n            },\r\n        },\r\n        height: 220,\r\n    };\r\n\r\n    const renderContent = () => {\r\n        if (loading) {\r\n            return <Spin tip=\"加载中...\" size=\"large\" style={{ marginTop: 60, display: 'flex', justifyContent: 'center' }} />;\r\n        }\r\n\r\n        if (error && !useMockData) {\r\n            return <Alert message={error} type=\"error\" style={{ marginTop: 15 }} />;\r\n        }\r\n\r\n        if (!statsData || statsData.length === 0) {\r\n            return <Empty description=\"暂无数据\" style={{ marginTop: 30 }} />;\r\n        }\r\n\r\n        return (\r\n            <Row gutter={[12, 12]}>\r\n                {(useMockData || error) && (\r\n                    <Col span={24}>\r\n                        <Alert\r\n                            message={useMockData ? \"当前显示的是模拟数据\" : \"数据加载出现问题\"}\r\n                            description={\r\n                                <div>\r\n                                    <p style={{ margin: '8px 0' }}>{error || '无法从服务器获取真实数据，当前显示的是模拟数据。'}</p>\r\n                                    <Space>\r\n                                        <Button \r\n                                            type=\"primary\" \r\n                                            size=\"small\"\r\n                                            icon={<ReloadOutlined />}\r\n                                            onClick={loadStats}\r\n                                            loading={loading}\r\n                                        >\r\n                                            重新加载数据\r\n                                        </Button>\r\n                                        <Button \r\n                                            type=\"link\" \r\n                                            size=\"small\"\r\n                                            onClick={checkApiStatus}\r\n                                            loading={apiStatus.checking}\r\n                                        >\r\n                                            检查API状态\r\n                                        </Button>\r\n                                    </Space>\r\n                                </div>\r\n                            }\r\n                            type=\"warning\"\r\n                            showIcon\r\n                            style={{ marginBottom: 12 }}\r\n                        />\r\n                    </Col>\r\n                )}\r\n                \r\n                <Col xs={24} lg={8}>\r\n                    <Card \r\n                        title={\r\n                            <Space>\r\n                                <span>建议提交数量</span>\r\n                                {apiStatus.available === true && (\r\n                                    <Text type=\"success\"><CheckCircleOutlined /> API可用</Text>\r\n                                )}\r\n                                {apiStatus.available === false && (\r\n                                    <Text type=\"danger\"><ExclamationCircleOutlined /> API不可用</Text>\r\n                                )}\r\n                            </Space>\r\n                        } \r\n                        size=\"small\"\r\n                        bordered={false}\r\n                        bodyStyle={{ padding: '8px' }}\r\n                        headStyle={{ padding: '8px 12px' }}\r\n                        extra={\r\n                            <Button \r\n                                icon={<ReloadOutlined />} \r\n                                onClick={loadStats}\r\n                                loading={loading}\r\n                                size=\"small\"\r\n                            >\r\n                                刷新\r\n                            </Button>\r\n                        }\r\n                    >\r\n                        <Bar {...barConfig} />\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} lg={8}>\r\n                    <Card \r\n                        title=\"通过率和实施完成率对比\" \r\n                        size=\"small\"\r\n                        bordered={false}\r\n                        bodyStyle={{ padding: '8px' }}\r\n                        headStyle={{ padding: '8px 12px' }}\r\n                    >\r\n                        <Line {...rateComparisonConfig} />\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} lg={8}>\r\n                    <Card \r\n                        title=\"员工得分统计\" \r\n                        size=\"small\"\r\n                        bordered={false}\r\n                        bodyStyle={{ padding: '8px' }}\r\n                        headStyle={{ padding: '8px 12px' }}\r\n                    >\r\n                        <Bar {...scoreConfig} />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card \r\n                        title=\"详细数据\" \r\n                        size=\"small\"\r\n                        bordered={false}\r\n                        bodyStyle={{ padding: '8px' }}\r\n                        headStyle={{ padding: '8px 12px' }}\r\n                    >\r\n                        <Table\r\n                            columns={columns}\r\n                            dataSource={statsData}\r\n                            rowKey=\"name\"\r\n                            loading={loading}\r\n                            size=\"small\"\r\n                            pagination={false}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"team-internal-report\" style={{ maxWidth: '1200px', margin: '0 auto' }}>\r\n            <Card \r\n                title=\"班组内部报表统计\" \r\n                size=\"small\"\r\n                bodyStyle={{ padding: '12px' }}\r\n                extra={\r\n                    <Space size=\"small\">\r\n                        <RangePicker\r\n                            value={dateRange}\r\n                            onChange={setDateRange}\r\n                            allowClear={false}\r\n                            ranges={presetRanges}\r\n                            size=\"small\"\r\n                        />\r\n                        <Button \r\n                            icon={<ReloadOutlined />} \r\n                            onClick={loadStats}\r\n                            loading={loading}\r\n                            size=\"small\"\r\n                        >\r\n                            刷新\r\n                        </Button>\r\n                    </Space>\r\n                }\r\n            >\r\n                {renderContent()}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamInternalReport; "],"names":["getDepartmentStats","async","startDate","endDate","console","log","params","response","api","get","success","Array","isArray","data","error","message","status","request","getTeamInternalStats","team","getDepartmentTrends","period","arguments","length","undefined","checkApiStatus","healthResult","checkHealth","statsResult","timeout","showErrorMessage","time","userMessage","RangePicker","DatePicker","Text","Typography","Option","Select","presetRanges","moment","subtract","startOf","mockData","name","totalSubmissions","approvalRate","implementationRate","totalScore","TeamInternalReport","loading","setLoading","useState","statsData","setStatsData","setError","dateRange","setDateRange","add","useMockData","setUseMockData","currentTeam","setCurrentTeam","userTeam","setUserTeam","apiStatus","setApiStatus","checking","available","lastChecked","useEffect","currentUser","authService","getCurrentUser","fetchUserTeam","prev","result","statisticsService","Date","loadStats","start","end","format","warning","errorMessage","_error$response$data","columns","title","dataIndex","key","sorter","a","b","render","val","toFixed","barConfig","xField","yField","label","position","meta","alias","height","rateComparisonConfig","map","item","rate","type","flat","seriesField","formatter","v","scoreConfig","style","fill","_jsx","className","maxWidth","margin","children","Card","size","bodyStyle","padding","extra","_jsxs","Space","value","onChange","allowClear","ranges","Button","icon","ReloadOutlined","onClick","Spin","tip","marginTop","display","justifyContent","Alert","Row","gutter","Col","span","description","showIcon","marginBottom","xs","lg","CheckCircleOutlined","ExclamationCircleOutlined","bordered","headStyle","Bar","Line","Table","dataSource","rowKey","pagination","Empty"],"sourceRoot":""}