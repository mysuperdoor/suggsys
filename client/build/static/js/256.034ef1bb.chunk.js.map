{"version":3,"file":"static/js/256.034ef1bb.chunk.js","mappings":"oaACO,MAAMA,EAAgB,CAC3BC,qBAAsB,uCACtBC,sBAAuB,uCACvBC,SAAU,qBACVC,SAAU,sBAICC,EAAuB,CAClCJ,qBAAsB,OACtBC,sBAAuB,SACvBC,SAAU,QACVC,SAAU,OAICE,EAA4B,CACvCL,qBAAsB,CAAC,WAAY,YACnCC,sBAAuB,CAAC,WAAY,YACpCC,SAAU,GACVC,SAAU,CAAC,yBAIAG,EAAwB,CACnCC,YAAa,qBACbC,WAAY,qBACZC,YAAa,qBACbC,QAAS,eACTC,UAAW,qBACXC,UAAW,sBAIAC,EAAoC,CAC/CN,YAAa,CAAC,aAAc,aAC5BC,WAAY,CAAC,cAAe,aAC5BC,YAAa,CAAC,YAAa,UAAW,aACtCC,QAAS,CAAC,cAAe,YAAa,aACtCC,UAAW,GACXC,UAAW,CAAC,eAIDE,EAA+B,CAC1CP,YAAa,OACbC,WAAY,aACZC,YAAa,UACbC,QAAS,SACTC,UAAW,UACXC,UAAW,OAIAG,EAAoB,CAC/Bf,qBAAsB,uCACtBC,sBAAuB,uCACvBC,SAAU,qBACVC,SAAU,qBACVI,YAAa,qBACbS,gBAAiB,uCACjBC,aAAc,qBACdP,QAAS,2BACTC,UAAW,qBACXC,UAAW,sBAIAM,EAAmB,CAC9BC,OAAQ,iCACRC,WAAY,iCACZC,WAAY,iCACZC,iBAAkB,uCAClBC,iBAAkB,iCAClBC,MAAO,sBAIIC,EAAgB,CAC3BC,YAAa,2BACbC,aAAc,4BAIHC,EAAiB,CAC5BC,QAAS,qBACT3B,SAAU,eACVC,SAAU,gBAIC2B,EAAgB,CAC3B9B,qBAAsB,OACtBC,sBAAuB,SACvBC,SAAU,QACVC,SAAU,MACVI,YAAa,UACbS,gBAAiB,OACjBC,aAAc,OACdP,QAAS,SACTC,UAAW,QACXC,UAAW,WAIAmB,EAAc,CACzBZ,OAAQ,UACRC,WAAY,WACZC,WAAY,SACZC,iBAAkB,OAClBC,iBAAkB,MAClBC,MAAO,S,6DC5GT,MAAMQ,EAAU,eAEHC,EAAoB,CAE/BC,cAAeC,UACb,IAEE,aADuBC,EAAAA,EAAIC,IAAI,sBAEjC,CAAE,MAAOC,GAEP,MADAC,QAAQD,MAAM,gEAAeA,GACvBA,CACR,GAIFE,iBAAkBL,UAChB,IACEI,QAAQE,IAAI,0DAAcC,GAG1B,MAAMC,QAAiBP,EAAAA,EAAIQ,KAAK,eAAgBF,EAAU,CACxDG,QAAS,CAEP,oBAAgBC,KAKpB,OADAP,QAAQE,IAAI,wCAAWE,GAChBA,CACT,CAAE,MAAOL,GAAQ,IAADS,EAGd,MAFAR,QAAQD,MAAM,wCAAWA,GACzBC,QAAQD,MAAM,4BAAuB,QAAhBS,EAAET,EAAMK,gBAAQ,IAAAI,OAAA,EAAdA,EAAgBC,MACjCV,CACR,GAIFW,eAAgBd,iBAAwB,IAAjBe,EAAMC,UAAAC,OAAA,QAAAN,IAAAK,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/B,IACEZ,QAAQE,IAAI,6CAA8CS,GAE1D,MAAMG,EAAc,IAAIC,gBAAgBJ,GAAQK,WAChDhB,QAAQE,IAAI,kDAAmDY,GAE/D,MAAMV,QAAiBP,EAAAA,EAAIC,IAAI,gBAAgBgB,KAE/Cd,QAAQE,IAAI,+DAA4CE,GAGxD,IAAIa,EAAS,CACXR,KAAM,GACNS,WAAY,CACVC,QAASC,SAAST,EAAOU,OAAS,EAClCC,SAAUF,SAAST,EAAOY,QAAU,GACpCC,MAAO,IAKX,GAAIpB,GAAYA,EAASK,MAAQgB,MAAMC,QAAQtB,EAASK,KAAKkB,aAC3D3B,QAAQE,IAAI,4EACZe,EAAOR,KAAOL,EAASK,KAAKkB,YACxBvB,EAASK,KAAKS,aAChBD,EAAOC,WAAa,CAClBC,QAASC,SAAShB,EAASK,KAAKS,WAAWC,UAAYF,EAAOC,WAAWC,QACzEG,SAAUF,SAAShB,EAASK,KAAKS,WAAWI,WAAaL,EAAOC,WAAWI,SAC3EE,MAAOJ,SAAShB,EAASK,KAAKS,WAAWM,QAAUP,EAAOC,WAAWM,aAKtE,GAAIpB,GAAYqB,MAAMC,QAAQtB,EAASK,MAC1CT,QAAQE,IAAI,wCACZe,EAAOR,KAAOL,EAASK,KACvBQ,EAAOC,WAAWM,MAAQpB,EAASK,KAAKI,YAGrC,GAAIT,GAAYA,EAASK,MAAQL,EAASK,KAAKA,MAAQgB,MAAMC,QAAQtB,EAASK,KAAKA,MACtFT,QAAQE,IAAI,6CACZe,EAAOR,KAAOL,EAASK,KAAKA,KACxBL,EAASK,KAAKS,WAChBD,EAAOC,WAAa,CAClBC,QAASC,SAAShB,EAASK,KAAKS,WAAWC,UAAYF,EAAOC,WAAWC,QACzEG,SAAUF,SAAShB,EAASK,KAAKS,WAAWI,WAAaL,EAAOC,WAAWI,SAC3EE,MAAOJ,SAAShB,EAASK,KAAKS,WAAWM,QAAUP,EAAOC,WAAWM,OAGvEP,EAAOC,WAAWM,MAAQpB,EAASK,KAAKA,KAAKI,YAO/C,GAFAb,QAAQ4B,KAAK,2EAA8CxB,GAEvDA,GAAgC,kBAAbA,EAAuB,CAE5C,MAAMyB,EAAYC,OAAOC,QAAQ3B,GAAU4B,MAAKC,IAAA,IAAEC,EAAGC,GAAMF,EAAA,OAAKR,MAAMC,QAAQS,EAAM,IAChFN,IACF7B,QAAQE,IAAI,2DAAc2B,EAAU,MACpCZ,EAAOR,KAAOoB,EAAU,GACxBZ,EAAOC,WAAWM,MAAQK,EAAU,GAAGhB,QAIzC,MAAMuB,EAAiBN,OAAOC,QAAQ3B,GAAU4B,MAAKK,IAAA,IAAEC,EAAKH,GAAME,EAAA,MAC/C,kBAAVF,GACG,OAAVA,IACS,eAARG,GAAgC,SAARA,GAA0B,WAARA,EAAiB,IAG9D,GAAIF,EAAgB,CAClBpC,QAAQE,IAAI,2DAAckC,EAAe,MACzC,MAAMG,EAAiBH,EAAe,GACtCnB,EAAOC,WAAa,CAClBC,QAASC,SAASmB,EAAepB,SAAWoB,EAAelB,MAAQkB,EAAeC,aAAe,GACjGlB,SAAUF,SAASmB,EAAejB,UAAYiB,EAAehB,OAASgB,EAAeE,MAAQ,IAC7FjB,MAAOJ,SAASmB,EAAef,OAASe,EAAeG,YAAcH,EAAeI,YAAc,GAEtG,CACF,CAIF,OADA3C,QAAQE,IAAI,2EAA8Ce,GACnDA,CACT,CAAE,MAAOlB,GAAQ,IAAD6C,EAEd,MADA5C,QAAQD,MAAM,qDAA2B,QAAd6C,EAAA7C,EAAMK,gBAAQ,IAAAwC,OAAA,EAAdA,EAAgBnC,OAAQV,EAAM8C,SACnD9C,CACR,CACF,EAGA+C,kBAAmBlD,UACjB,IACE,MAAMQ,QAAiBP,EAAAA,EAAIC,IAAI,gBAAgBiD,KAE/C,OAAI3C,GAAYA,EAASK,KAChB,CACLA,KAAMuC,EAAuB5C,EAASK,OAE/BL,EACF,CACLK,KAAMuC,EAAuB5C,IAG1BA,CACT,CAAE,MAAOL,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrBA,CACR,GAIFkD,uBAAwBrD,MAAOmD,EAAIG,EAAQC,KACzC,IAKE,aAJuBtD,EAAAA,EAAIuD,IAAI,gBAAgBL,WAAa,CAC1DG,SACAC,WAGJ,CAAE,MAAOpD,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrBA,CACR,GAIFsD,YAAazD,MAAOmD,EAAIO,EAAUC,KAChC,IACEvD,QAAQE,IAAI,wCAAW6C,EAAI,4BAASO,EAAU,4BAASC,GACvD,MAAMnD,QAAiBP,EAAAA,EAAIuD,IAAI,gBAAgBL,iBAAmB,CAChE9B,OAAQqC,EACRC,SAAUA,IAGZ,OADAvD,QAAQE,IAAI,wCAAWE,GAChBA,CACT,CAAE,MAAOL,GAAQ,IAADyD,EAGd,MAFAxD,QAAQD,MAAM,wCAAWA,GACzBC,QAAQD,MAAM,4BAAuB,QAAhByD,EAAEzD,EAAMK,gBAAQ,IAAAoD,OAAA,EAAdA,EAAgB/C,MACjCV,CACR,GAIF0D,aAAc7D,MAAOmD,EAAIO,EAAUC,KACjC,IACEvD,QAAQE,IAAI,wCAAW6C,EAAI,4BAASO,EAAU,4BAASC,GACvD,MAAMnD,QAAiBP,EAAAA,EAAIuD,IAAI,gBAAgBL,kBAAoB,CACjE9B,OAAQqC,EACRC,SAAUA,IAGZ,OADAvD,QAAQE,IAAI,wCAAWE,GAChBA,CACT,CAAE,MAAOL,GAAQ,IAAD2D,EAGd,MAFA1D,QAAQD,MAAM,wCAAWA,GACzBC,QAAQD,MAAM,4BAAuB,QAAhB2D,EAAE3D,EAAMK,gBAAQ,IAAAsD,OAAA,EAAdA,EAAgBjD,MACjCV,CACR,GAIF4D,iBAAkB/D,MAAOmD,EAAIa,KAC3B,IACE5D,QAAQE,IAAI,4BAAS6C,EAAIa,GAEzB,aADuB/D,EAAAA,EAAIuD,IAAI,gBAAgBL,IAAMa,EAEvD,CAAE,MAAO7D,GAEP,MADAC,QAAQD,MAAM,wCAAWA,GACnBA,CACR,GAMF8D,WAAYjE,MAAOmD,EAAII,KACrB,IAIE,aAHuBtD,EAAAA,EAAIQ,KAAK,gBAAgB0C,aAAe,CAC7De,QAASX,GAGb,CAAE,MAAOpD,GAEP,MADAC,QAAQD,MAAM,wCAAWA,GACnBA,CACR,GAIFgE,kBAAmBnE,UACjB,IAEE,aADuBoE,EAAAA,EAAMlE,IAAIL,IACjBgB,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrBA,CACR,GAIFkE,cAAerE,UACb,IAEE,aADuBoE,EAAAA,EAAMlE,IAAI,GAAGL,KAAWsD,MAC/BtC,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrBA,CACR,GAIFmE,iBAAkBtE,UAChB,IAEE,aADuBoE,EAAAA,EAAM3D,KAAKZ,EAAS0E,IAC3B1D,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,wCAAWA,GACnBA,CACR,GAIFqE,iBAAkBxE,UAChB,IACEI,QAAQE,IAAI,yCAAW6C,KACvB,MAAM3C,QAAiBP,EAAAA,EAAIwE,OAAO,gBAAgBtB,KAGlD,OAFA/C,QAAQE,IAAI,wCAAWE,GAEnBA,IAAiC,IAArBA,EAASkE,QAChB,CAAEA,SAAS,EAAMzB,QAASzC,EAASyC,UAG1C7C,QAAQ4B,KAAK,wFAAmBxB,GACzB,CAAEkE,SAAS,EAAOzB,SAAiB,OAARzC,QAAQ,IAARA,OAAQ,EAARA,EAAUyC,UAAW,sEAE3D,CAAE,MAAO9C,GAAQ,IAADwE,EAAAC,EAAAC,EAGd,OAFAzE,QAAQD,MAAM,4BAAQgD,kBAAUhD,GAChCC,QAAQD,MAAM,4BAAuB,QAAhBwE,EAAExE,EAAMK,gBAAQ,IAAAmE,OAAA,EAAdA,EAAgB9D,MAChC,CACL6D,SAAS,EACTzB,SAAuB,QAAd2B,EAAAzE,EAAMK,gBAAQ,IAAAoE,GAAM,QAANC,EAAdD,EAAgB/D,YAAI,IAAAgE,OAAN,EAAdA,EAAsB5B,UAAW,6FAE9C,GAIF6B,gBAAiB9E,UACf,IAEE,aADuBoE,EAAAA,EAAM3D,KAAK,GAAGZ,KAAWsD,aAChCtC,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,oDAAaA,GACrBA,CACR,GAIF4E,iBAAkB/E,MAAOmD,EAAI6B,KAC3B,IAEE,aADuBZ,EAAAA,EAAM3D,KAAK,GAAGZ,KAAWsD,WAAa6B,IAC7CnE,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,wCAAWA,GACnBA,CACR,GAIF8E,qBAAsBjF,MAAOmD,EAAI+B,KAC/B,IAEE,MAAMC,EAAY,CAChB,qBAAO,cACP,qBAAO,aACP,qBAAO,cACP,qBAAO,YACP,eAAM,aAIFC,EAAgB,IACjBF,EACH5B,OAAQ6B,EAAUD,EAAmB5B,SAAW4B,EAAmB5B,eAG9D8B,EAAcC,WAErBjF,QAAQE,IAAI,wEAAiC6C,EAAIiC,GAOjD,MAAM5E,QAAiBP,EAAAA,EAAIuD,IAAI,GAAG3D,KAAWsD,mBAAqBiC,GAKlE,OAHAhF,QAAQE,IAAI,wCAAWE,GAGhB,CACLkE,SAAS,EACTzB,QAAS,mDACTpC,KAAML,EAASK,MAAQL,EAG3B,CAAE,MAAOL,GAAQ,IAADmF,EAAAC,EAAAC,EAId,OAHApF,QAAQD,MAAM,wEAAiCA,GAC/CC,QAAQD,MAAM,4BAAuB,QAAhBmF,EAAEnF,EAAMK,gBAAQ,IAAA8E,OAAA,EAAdA,EAAgBzE,MAEhC,CACL6D,SAAS,EACTzB,SAAuB,QAAdsC,EAAApF,EAAMK,gBAAQ,IAAA+E,GAAM,QAANC,EAAdD,EAAgB1E,YAAI,IAAA2E,OAAN,EAAdA,EAAsBvC,UAAW,mDAC1C9C,MAAOA,EAEX,GAIFsF,uBAAwBzF,UACtB,IAEE,aADuBoE,EAAAA,EAAMlE,IAAI,GAAGL,2BACpBgB,IAClB,CAAE,MAAOV,GAEP,MADAC,QAAQD,MAAM,gEAAeA,GACvBA,CACR,GAIFuF,aAAc1F,UACZ,IAEE,aADuBC,EAAAA,EAAIQ,KAAK,sBAAuBuE,EAEzD,CAAE,MAAO7E,GACP,MAAMA,CACR,GAIFwF,gBAAiB3F,MAAOmD,EAAIyC,KAC1B,IAEE,aADuB3F,EAAAA,EAAIQ,KAAK,gBAAgB0C,UAAY,CAAEyC,SAEhE,CAAE,MAAOzF,GAEP,MADAC,QAAQD,MAAM,gBAAMgD,8BAAYhD,GAC1BA,CACR,IAKJ,SAASiD,EAAuByC,GAC9B,IAAKA,EAAY,MAAO,CAAC,EAGzB,IAAIC,EAAiBD,EAAWC,eACX,IAADC,EAAhBD,EAEFA,EAAiB,IACZA,EAEHxC,OAAQwC,EAAexC,QAAU,cAEjC0C,kBAAmBF,EAAeE,oBACW,QADMD,EAChCD,EAAeG,mBAAW,IAAAF,OAAA,EAA1BA,EAA4BG,QACW,kBAA/BJ,EAAeG,YAA2BH,EAAeG,YAAc,sBAElGE,UAAWL,EAAeK,WAAa,KACvCC,eAAgBN,EAAeO,uBAAyBP,EAAeM,gBAAkB,KACzFE,cAAeR,EAAeS,sBAAwBT,EAAeQ,eAAiB,KAEtFE,MAAOV,EAAeU,OAASV,EAAenC,UAAY,GAE1D8C,QAASX,EAAeW,SAAW,IAIrCX,EAAiB,CACfxC,OAAQ,cACR0C,kBAAmB,qBACnBG,UAAW,KACXC,eAAgB,KAChBE,cAAe,KACfE,MAAO,GACPC,QAAS,IAKb,IAAIC,EAAeb,EAAWa,cAAgBb,EAAWvC,OACrDqD,EAAuBd,EAAWc,uBACZb,EAAiBA,EAAexC,OAAS,eAGnE,MAAM,cAAE1F,EAAa,sBAAEO,GAA0ByI,EAAQ,OAYzD,OATIhJ,EAAc8I,KAChBA,EAAe9I,EAAc8I,IAI3BvI,EAAsBwI,KACxBA,EAAuBxI,EAAsBwI,IAGxC,IACFd,EACHa,eACAC,uBACAb,iBAEAe,UAAWhB,EAAWgB,WAAa,CAAEX,KAAM,eAAMY,IAAK,MAEtDnD,SAAU9B,MAAMC,QAAQ+D,EAAWlC,UAAYkC,EAAWlC,SAASoD,KAAIxD,IAAO,IACzEA,EACHyD,KAAMzD,EAAQyD,MAAQ,CAAEd,KAAM,4BAC9Be,UAAW1D,EAAQ0D,YAAa,IAAIC,MAAOC,kBACvC,GAEV,C,4DChcO,MAgDMC,EAAuB,SAAC9D,GAAqC,IAA7B+D,EAAIrG,UAAAC,OAAA,QAAAN,IAAAK,UAAA,GAAAA,UAAA,GAAG,iBAClD,IAAKsC,EAAQ,MAAO,2BAGpB,GAAsB,kBAAXA,GAAuB,kBAAkBgE,KAAKhE,GACvD,OAAOA,EAMT,OAF2B,WAAT+D,EAAoBzJ,EAAAA,cAAgBO,EAAAA,uBAErCmF,IAAWA,CAC9B,EAQaiE,EAAiB,SAACjE,GAAqC,IAG9D6B,EAAWqC,EAHsBH,EAAIrG,UAAAC,OAAA,QAAAN,IAAAK,UAAA,GAAAA,UAAA,GAAG,iBAC5C,IAAKsC,EAAQ,MAAO,UAGpB,IAAImE,EAAanE,EAGjB,GAAsB,kBAAXA,GAAuB,kBAAkBgE,KAAKhE,GAAS,CAAC,IAADoE,EAChE,MAAMC,EAAuB,WAATN,EAAoBzJ,EAAAA,cAAgBO,EAAAA,sBAClDyJ,EACmC,QAD1BF,EAAGxF,OAAOC,QAAQwF,GAC9BvF,MAAKC,IAAA,IAAEC,EAAGC,GAAMF,EAAA,OAAKE,IAAUe,CAAM,WAAC,IAAAoE,OAAA,EADvBA,EAC0B,GACxCE,IACFH,EAAaG,EAEjB,CAYA,MATa,WAATP,GACFlC,EAAYvH,EAAAA,cACZ4J,EAAWvJ,EAAAA,uBAEXkH,EAAYhH,EAAAA,sBACZqJ,EAAW7I,EAAAA,8BAIN6I,EAASC,IAAe,SACjC,C","sources":["constants/suggestions.js","services/suggestionService.js","utils/statusUtils.js"],"sourcesContent":["// 审核状态\nexport const REVIEW_STATUS = {\n  PENDING_FIRST_REVIEW: '等待一级审核',\n  PENDING_SECOND_REVIEW: '等待二级审核',\n  APPROVED: '已批准',\n  REJECTED: '已驳回',\n};\n\n// 审核状态颜色映射\nexport const REVIEW_STATUS_COLORS = {\n  PENDING_FIRST_REVIEW: 'gold',     // 金色 - 等待一级审核\n  PENDING_SECOND_REVIEW: 'orange',  // 橙色 - 等待二级审核\n  APPROVED: 'green',               // 绿色 - 已批准\n  REJECTED: 'red',                 // 红色 - 已驳回\n};\n\n// 审核状态流转规则\nexport const REVIEW_STATUS_TRANSITIONS = {\n  PENDING_FIRST_REVIEW: ['APPROVED', 'REJECTED'],\n  PENDING_SECOND_REVIEW: ['APPROVED', 'REJECTED'],\n  APPROVED: [],\n  REJECTED: ['PENDING_FIRST_REVIEW'],\n};\n\n// 实施状态\nexport const IMPLEMENTATION_STATUS = {\n  NOT_STARTED: '未开始',\n  CONTACTING: '联系中',\n  IN_PROGRESS: '实施中',\n  DELAYED: '延期',\n  COMPLETED: '已完成',\n  CANCELLED: '已取消'\n};\n\n// 实施状态流转规则\nexport const IMPLEMENTATION_STATUS_TRANSITIONS = {\n  NOT_STARTED: ['CONTACTING', 'CANCELLED'],\n  CONTACTING: ['IN_PROGRESS', 'CANCELLED'],\n  IN_PROGRESS: ['COMPLETED', 'DELAYED', 'CANCELLED'],\n  DELAYED: ['IN_PROGRESS', 'COMPLETED', 'CANCELLED'],\n  COMPLETED: [],\n  CANCELLED: ['CONTACTING']\n};\n\n// 实施状态颜色\nexport const IMPLEMENTATION_STATUS_COLORS = {\n  NOT_STARTED: 'gold',   //金色\n  CONTACTING: 'processing', // 蓝色\n  IN_PROGRESS: 'warning',   // 黄色\n  DELAYED: 'orange',        // 橙色\n  COMPLETED: 'success',     // 绿色\n  CANCELLED: 'red'         // 红色\n};\n\n// 保留原有的状态定义以确保兼容性\nexport const SUGGESTION_STATUS = {\n  PENDING_FIRST_REVIEW: '等待一级审核',\n  PENDING_SECOND_REVIEW: '等待二级审核',\n  APPROVED: '已批准',\n  REJECTED: '已驳回',\n  NOT_STARTED: '未开始',\n  NOT_IMPLEMENTED: '已批准待实施',\n  IMPLEMENTING: '实施中',\n  DELAYED: '实施延期',\n  COMPLETED: '已完成',\n  CANCELLED: '已取消',\n};\n\n// 建议类型\nexport const SUGGESTION_TYPES = {\n  SAFETY: '调度安全类',\n  ELECTRICAL: '设备电气类',\n  MECHANICAL: '设备机械类',\n  KEXIN_AUTOMATION: '科信自动化类',\n  KEXIN_MONITORING: '科信监控类',\n  OTHER: '其它类'\n};\n\n// 审核级别\nexport const REVIEW_LEVELS = {\n  FIRST_LEVEL: '一级审核',\n  SECOND_LEVEL: '二级审核'\n};\n\n// 审核结果\nexport const REVIEW_RESULTS = {\n  PENDING: '待审核',\n  APPROVED: '通过',\n  REJECTED: '拒绝'\n};\n\n// 建议状态颜色映射 (保留以兼容现有代码)\nexport const STATUS_COLORS = {\n  PENDING_FIRST_REVIEW: 'gold',        // 金色 - 等待一级审核\n  PENDING_SECOND_REVIEW: 'orange',     // 橙色 - 等待二级审核\n  APPROVED: 'green',                   // 绿色 - 已批准\n  REJECTED: 'red',                     // 红色 - 已驳回\n  NOT_STARTED: 'default',              // 默认灰色 - 未开始\n  NOT_IMPLEMENTED: 'cyan',             // 青色 - a已批准待实施\n  IMPLEMENTING: 'blue',                // 蓝色 - 实施中\n  DELAYED: 'purple',                   // 紫色 - 实施延期\n  COMPLETED: 'green',                  // 绿色 - 已完成\n  CANCELLED: 'magenta',                // 洋红色 - 已取消\n};\n\n// 建议类型颜色映射\nexport const TYPE_COLORS = {\n  SAFETY: 'volcano',                   // 火山色 - 调度安全类\n  ELECTRICAL: 'geekblue',              // 极客蓝 - 设备电气类\n  MECHANICAL: 'orange',                // 活力橙 - 设备机械类\n  KEXIN_AUTOMATION: 'cyan',            // 科技青 - 科信自动化类\n  KEXIN_MONITORING: 'red',             // 警戒红 - 科信监控类\n  OTHER: 'purple'                      // 紫色 - 其它类\n}; \n","import api from './api';\nimport axios from 'axios';\n\n// 移除开头的 /api，假设 api 实例已配置 baseURL: '/api'\nconst API_URL = '/suggestions';\n\nexport const suggestionService = {\n  // 获取创建建议初始数据\n  getCreateData: async () => {\n    try {\n      const response = await api.get('/suggestions/create');\n      return response;\n    } catch (error) {\n      console.error('获取创建建议数据失败:', error);\n      throw error;\n    }\n  },\n\n  // 提交建议\n  submitSuggestion: async (formData) => {\n    try {\n      console.log('提交建议，表单数据:', formData);\n      \n      // 确保Content-Type由浏览器自动设置\n      const response = await api.post('/suggestions', formData, {\n        headers: {\n          // 不要显式设置Content-Type，让浏览器自动设置，确保边界字符串正确\n          'Content-Type': undefined\n        }\n      });\n      \n      console.log('提交建议响应:', response);\n      return response;\n    } catch (error) {\n      console.error('提交建议失败:', error);\n      console.error('错误响应:', error.response?.data);\n      throw error;\n    }\n  },\n\n  // 获取建议列表\n  getSuggestions: async (params = {}) => {\n    try {\n      console.log('suggestionService.getSuggestions - params:', params);\n      // 将 params 对象转换为查询字符串\n      const queryString = new URLSearchParams(params).toString();\n      console.log('suggestionService.getSuggestions - queryString:', queryString);\n      // 将查询字符串附加到 URL，并使用 api 对象\n      const response = await api.get(`/suggestions?${queryString}`); \n      \n      console.log('suggestionService.getSuggestions - 原始响应:', response);\n      \n      // 分析响应结构并适配成统一的格式：{ data: [...], pagination: {...} }\n      let result = {\n        data: [],\n        pagination: {\n          current: parseInt(params.page) || 1,\n          pageSize: parseInt(params.limit) || 10,\n          total: 0\n        }\n      };\n      \n      // 1. 检查后端直接返回的 suggestions 和 pagination 格式\n      if (response && response.data && Array.isArray(response.data.suggestions)) {\n        console.log('格式1: response.data = { suggestions: [...], pagination: {...} }');\n        result.data = response.data.suggestions;\n        if (response.data.pagination) {\n          result.pagination = {\n            current: parseInt(response.data.pagination.current) || result.pagination.current,\n            pageSize: parseInt(response.data.pagination.pageSize) || result.pagination.pageSize,\n            total: parseInt(response.data.pagination.total) || result.pagination.total\n          };\n        }\n      } \n      // 2. 检查直接返回数组的格式\n      else if (response && Array.isArray(response.data)) {\n        console.log('格式2: response.data = [...]');\n        result.data = response.data;\n        result.pagination.total = response.data.length; // 直接返回数组时，总数就是数组长度\n      }\n      // 3. 检查嵌套数据的格式\n      else if (response && response.data && response.data.data && Array.isArray(response.data.data)) {\n        console.log('格式3: response.data.data = [...]');\n        result.data = response.data.data;\n        if (response.data.pagination) {\n          result.pagination = {\n            current: parseInt(response.data.pagination.current) || result.pagination.current,\n            pageSize: parseInt(response.data.pagination.pageSize) || result.pagination.pageSize,\n            total: parseInt(response.data.pagination.total) || result.pagination.total\n          };\n        } else {\n          result.pagination.total = response.data.data.length; // 没有分页信息时，总数为数组长度\n        }\n      } \n      // 4. 处理其他可能的格式\n      else {\n        console.warn('suggestionService.getSuggestions - 未知响应结构:', response);\n        // 尝试从响应中提取有用信息\n        if (response && typeof response === 'object') {\n          // 尝试找到第一个数组类型的属性作为数据\n          const arrayProp = Object.entries(response).find(([_, value]) => Array.isArray(value));\n          if (arrayProp) {\n            console.log(`找到可能的数据数组: ${arrayProp[0]}`);\n            result.data = arrayProp[1];\n            result.pagination.total = arrayProp[1].length;\n          }\n          \n          // 尝试找到分页信息\n          const paginationProp = Object.entries(response).find(([key, value]) => \n            typeof value === 'object' && \n            value !== null && \n            (key === 'pagination' || key === 'page' || key === 'paging')\n          );\n          \n          if (paginationProp) {\n            console.log(`找到可能的分页信息: ${paginationProp[0]}`);\n            const paginationData = paginationProp[1];\n            result.pagination = {\n              current: parseInt(paginationData.current || paginationData.page || paginationData.currentPage || 1),\n              pageSize: parseInt(paginationData.pageSize || paginationData.limit || paginationData.size || 10),\n              total: parseInt(paginationData.total || paginationData.totalCount || paginationData.totalItems || 0)\n            };\n          }\n        }\n      }\n      \n      console.log('suggestionService.getSuggestions - 处理后的结果:', result);\n      return result;\n    } catch (error) {\n      console.error('获取建议列表失败:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n\n  // 获取单个建议详情\n  getSuggestionById: async (id) => {\n    try {\n      const response = await api.get(`/suggestions/${id}`);\n      // 验证并修复可能的空数据\n      if (response && response.data) {\n        return {\n          data: validateSuggestionData(response.data)\n        };\n      } else if (response) {\n        return {\n          data: validateSuggestionData(response)\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('获取建议详情失败:', error);\n      throw error;\n    }\n  },\n\n  // 更新建议状态\n  updateSuggestionStatus: async (id, status, comment) => {\n    try {\n      const response = await api.put(`/suggestions/${id}/status`, {\n        status,\n        comment\n      });\n      return response;\n    } catch (error) {\n      console.error('更新建议状态失败:', error);\n      throw error;\n    }\n  },\n\n  // 一级审核\n  firstReview: async (id, approved, comments) => {\n    try {\n      console.log('提交一级审核:', id, '审核结果:', approved, '审核意见:', comments);\n      const response = await api.put(`/suggestions/${id}/first-review`, {\n        result: approved,  // 使用 result 字段\n        comments: comments\n      });\n      console.log('一级审核响应:', response);\n      return response;\n    } catch (error) {\n      console.error('一级审核失败:', error);\n      console.error('错误详情:', error.response?.data);\n      throw error;\n    }\n  },\n\n  // 二级审核\n  secondReview: async (id, approved, comments) => {\n    try {\n      console.log('提交二级审核:', id, '审核结果:', approved, '审核意见:', comments);\n      const response = await api.put(`/suggestions/${id}/second-review`, {\n        result: approved,  // 使用 result 字段\n        comments: comments\n      });\n      console.log('二级审核响应:', response);\n      return response;\n    } catch (error) {\n      console.error('二级审核失败:', error);\n      console.error('错误详情:', error.response?.data);\n      throw error;\n    }\n  },\n\n  // 更新建议\n  updateSuggestion: async (id, updateData) => {\n    try {\n      console.log('更新建议:', id, updateData);\n      const response = await api.put(`/suggestions/${id}`, updateData);\n      return response;\n    } catch (error) {\n      console.error('更新建议失败:', error);\n      throw error;\n    }\n  },\n\n  // 撤回功能已删除\n\n  // 添加评论\n  addComment: async (id, comment) => {\n    try {\n      const response = await api.post(`/suggestions/${id}/comments`, {\n        content: comment\n      });\n      return response;\n    } catch (error) {\n      console.error('添加评论失败:', error);\n      throw error;\n    }\n  },\n\n  // 获取所有建议\n  getAllSuggestions: async () => {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data;\n    } catch (error) {\n      console.error('获取建议列表失败:', error);\n      throw error;\n    }\n  },\n\n  // 获取单个建议\n  getSuggestion: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('获取建议详情失败:', error);\n      throw error;\n    }\n  },\n\n  // 创建新建议\n  createSuggestion: async (suggestionData) => {\n    try {\n      const response = await axios.post(API_URL, suggestionData);\n      return response.data;\n    } catch (error) {\n      console.error('创建建议失败:', error);\n      throw error;\n    }\n  },\n\n  // 删除建议\n  deleteSuggestion: async (id) => {\n    try {\n      console.log(`尝试删除建议: ${id}`);\n      const response = await api.delete(`/suggestions/${id}`);\n      console.log('删除建议响应:', response);\n      // 后端返回 { success: true, message: '...' }\n      if (response && response.success === true) {\n        return { success: true, message: response.message };\n      } else {\n        // 如果后端没有按预期返回 success: true\n        console.warn('删除成功但响应格式不符合预期:', response);\n        return { success: false, message: response?.message || '删除失败，响应格式错误' };\n      }\n    } catch (error) {\n      console.error(`删除建议 ${id} 失败:`, error);\n      console.error('错误响应:', error.response?.data);\n      return {\n        success: false,\n        message: error.response?.data?.message || '删除建议时发生网络或服务器错误'\n      };\n    }\n  },\n\n  // 提交建议审核\n  submitForReview: async (id) => {\n    try {\n      const response = await axios.post(`${API_URL}/${id}/submit`);\n      return response.data;\n    } catch (error) {\n      console.error('提交建议审核失败:', error);\n      throw error;\n    }\n  },\n\n  // 审核建议\n  reviewSuggestion: async (id, reviewData) => {\n    try {\n      const response = await axios.post(`${API_URL}/${id}/review`, reviewData);\n      return response.data;\n    } catch (error) {\n      console.error('审核建议失败:', error);\n      throw error;\n    }\n  },\n  \n  // 更新建议实施状态\n  updateImplementation: async (id, implementationData) => {\n    try {\n      // 使用新的实施状态映射\n      const statusMap = {\n        '未开始': 'NOT_STARTED',\n        '联系中': 'CONTACTING',\n        '实施中': 'IN_PROGRESS',\n        '已完成': 'COMPLETED',\n        '取消': 'CANCELLED'\n      };\n\n      // 准备发送到后端的数据\n      const updatePayload = {\n        ...implementationData,\n        status: statusMap[implementationData.status] || implementationData.status,\n      };\n      // 删除 evaluation 键，以防万一\n      delete updatePayload.evaluation;\n\n      console.log('发送实施更新请求 (suggestionService):', id, updatePayload);\n      \n      // 调用统一的更新接口 (假设是 PUT /api/suggestions/:id/implementation 或类似)\n      // 注意：后端路由和控制器需要对应这个路径和方法\n      // 查找之前的代码，发现后端控制器是 suggestionController.updateImplementation\n      // 路由是 PUT /api/suggestions/:id/implementation (需要确认或调整)\n      // 假设路由是 /api/suggestions/:id/implementation\n      const response = await api.put(`${API_URL}/${id}/implementation`, updatePayload);\n      \n      console.log('实施更新响应:', response);\n      \n      // 返回成功标识和数据\n      return {\n        success: true,\n        message: '实施状态更新成功',\n        data: response.data || response // 根据后端实际返回调整\n      };\n\n    } catch (error) {\n      console.error('更新实施状态失败 (suggestionService):', error);\n      console.error('错误响应:', error.response?.data);\n      // 返回包含错误信息的对象\n      return {\n        success: false,\n        message: error.response?.data?.message || '更新实施状态失败', // 优先使用后端错误信息\n        error: error\n      };\n    }\n  },\n  \n  // 获取实施统计数据\n  getImplementationStats: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/stats/implementation`);\n      return response.data;\n    } catch (error) {\n      console.error('获取实施统计数据失败:', error);\n      throw error;\n    }\n  },\n\n  // 提交审核\n  submitReview: async (reviewData) => {\n    try {\n      const response = await api.post('/suggestions/review', reviewData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // 部门经理为建议打分\n  scoreSuggestion: async (id, score) => {\n    try {\n      const response = await api.post(`/suggestions/${id}/score`, { score });\n      return response; // 通常返回更新后的 suggestion 对象\n    } catch (error) {\n      console.error(`建议 ${id} 打分失败:`, error);\n      throw error; // 将错误抛出给调用者处理\n    }\n  }\n};\n\n// 验证并修复建议数据，确保关键字段存在\nfunction validateSuggestionData(suggestion) {\n  if (!suggestion) return {};\n\n  // 处理实施信息，确保字段命名一致\n  let implementation = suggestion.implementation;\n  if (implementation) {\n    // 确保前端显示所需的字段存在\n    implementation = {\n      ...implementation,\n      // 确保状态字段存在，并进行状态名称标准化\n      status: implementation.status || 'NOT_STARTED',\n      // 确保责任人字段存在，优先使用responsiblePerson字段\n      responsiblePerson: implementation.responsiblePerson || \n                         implementation.implementer?.name || \n                         (typeof implementation.implementer === 'string' ? implementation.implementer : '未分配'),\n      // 确保日期字段存在\n      startDate: implementation.startDate || null,\n      plannedEndDate: implementation.plannedCompletionDate || implementation.plannedEndDate || null,\n      actualEndDate: implementation.actualCompletionDate || implementation.actualEndDate || null,\n      // 确保备注字段存在\n      notes: implementation.notes || implementation.comments || '',\n      // 确保历史记录存在\n      history: implementation.history || []\n    };\n  } else {\n    // 如果没有实施信息，创建默认的实施信息\n    implementation = {\n      status: 'NOT_STARTED',\n      responsiblePerson: '未分配',\n      startDate: null,\n      plannedEndDate: null,\n      actualEndDate: null,\n      notes: '',\n      history: []\n    };\n  }\n  \n  // 处理建议状态\n  let reviewStatus = suggestion.reviewStatus || suggestion.status;\n  let implementationStatus = suggestion.implementationStatus || \n                           (implementation ? implementation.status : 'NOT_STARTED');\n  \n  // 导入状态常量\n  const { REVIEW_STATUS, IMPLEMENTATION_STATUS } = require('../constants/suggestions');\n  \n  // 转换审核状态\n  if (REVIEW_STATUS[reviewStatus]) {\n    reviewStatus = REVIEW_STATUS[reviewStatus];\n  }\n  \n  // 转换实施状态\n  if (IMPLEMENTATION_STATUS[implementationStatus]) {\n    implementationStatus = IMPLEMENTATION_STATUS[implementationStatus];\n  }\n  \n  return {\n    ...suggestion,\n    reviewStatus,\n    implementationStatus,\n    implementation,\n    // 确保submitter字段存在\n    submitter: suggestion.submitter || { name: '未知', _id: null },\n    // 确保comments字段是数组\n    comments: Array.isArray(suggestion.comments) ? suggestion.comments.map(comment => ({\n      ...comment,\n      user: comment.user || { name: '未知用户' },\n      createdAt: comment.createdAt || new Date().toISOString()\n    })) : []\n  };\n} ","import {\n  SUGGESTION_STATUS,\n  REVIEW_STATUS,\n  IMPLEMENTATION_STATUS,\n  REVIEW_STATUS_COLORS,\n  IMPLEMENTATION_STATUS_COLORS,\n  IMPLEMENTATION_STATUS_TRANSITIONS\n} from '../constants/suggestions';\n\n/**\n * 映射旧状态到新的审核状态和实施状态\n * @param {string} oldStatus 旧状态值\n * @returns {Object} 包含reviewStatus和implementationStatus的对象\n */\nexport const mapOldStatusToNew = (oldStatus) => {\n  const result = {\n    reviewStatus: null,\n    implementationStatus: null\n  };\n\n  if (!oldStatus) return result;\n\n  // 审核相关状态\n  if (oldStatus === 'PENDING_FIRST_REVIEW' || oldStatus === '等待一级审核') {\n    result.reviewStatus = 'PENDING_FIRST_REVIEW';\n  } else if (oldStatus === 'PENDING_SECOND_REVIEW' || oldStatus === '等待二级审核') {\n    result.reviewStatus = 'PENDING_SECOND_REVIEW';\n  } else if (oldStatus === 'REJECTED' || oldStatus === '已驳回') {\n    result.reviewStatus = 'REJECTED';\n  } else if (oldStatus === 'WITHDRAWN' || oldStatus === '已撤回') {\n    result.reviewStatus = 'WITHDRAWN';\n  }\n\n  // 实施相关状态\n  if (oldStatus === 'NOT_STARTED' || oldStatus === '未开始') {\n    result.implementationStatus = 'NOT_STARTED';\n  } else if (oldStatus === 'NOT_IMPLEMENTED' || oldStatus === 'APPROVED_FOR_IMPLEMENTATION' || \n             oldStatus === '已批准待实施' || oldStatus === '已批准实施') {\n    result.reviewStatus = 'APPROVED'; // 已经通过审核\n    result.implementationStatus = 'PENDING_IMPLEMENTATION';\n  } else if (oldStatus === 'IMPLEMENTING' || oldStatus === 'IN_PROGRESS' || oldStatus === '实施中') {\n    result.reviewStatus = 'APPROVED'; // 已经通过审核\n    result.implementationStatus = 'IN_PROGRESS';\n  } else if (oldStatus === 'DELAYED' || oldStatus === '实施延期') {\n    result.reviewStatus = 'APPROVED'; // 已经通过审核\n    result.implementationStatus = 'DELAYED';\n  } else if (oldStatus === 'COMPLETED' || oldStatus === '已完成') {\n    result.reviewStatus = 'APPROVED'; // 已经通过审核\n    result.implementationStatus = 'COMPLETED';\n  } else if (oldStatus === 'CANCELLED' || oldStatus === '已取消') {\n    result.implementationStatus = 'CANCELLED';\n  }\n\n  return result;\n};\n\n/**\n * 获取状态的显示文本\n * @param {string} status 状态编码或文本\n * @param {string} type 状态类型，'review'或'implementation'\n * @returns {string} 状态的中文显示文本\n */\nexport const getStatusDisplayText = (status, type = 'implementation') => {\n  if (!status) return '未知状态';\n  \n  // 如果已经是中文状态，直接返回\n  if (typeof status === 'string' && /[\\u4e00-\\u9fa5]/.test(status)) {\n    return status;\n  }\n  \n  // 根据类型选择状态映射\n  const statusMap = type === 'review' ? REVIEW_STATUS : IMPLEMENTATION_STATUS;\n  \n  return statusMap[status] || status;\n};\n\n/**\n * 获取状态显示的颜色\n * @param {string} status 状态编码或文本\n * @param {string} type 状态类型，'review'或'implementation'\n * @returns {string} 状态显示颜色\n */\nexport const getStatusColor = (status, type = 'implementation') => {\n  if (!status) return 'default';\n\n  let statusMap, colorMap;\n  let statusCode = status;\n\n  // 如果已经是中文状态，尝试转换回英文代码\n  if (typeof status === 'string' && /[\\u4e00-\\u9fa5]/.test(status)) {\n    const mapToSearch = type === 'review' ? REVIEW_STATUS : IMPLEMENTATION_STATUS;\n    const foundCode = Object.entries(mapToSearch)\n      .find(([_, value]) => value === status)?.[0];\n    if (foundCode) {\n      statusCode = foundCode;\n    }\n  }\n\n  // 根据类型选择映射表\n  if (type === 'review') {\n    statusMap = REVIEW_STATUS;\n    colorMap = REVIEW_STATUS_COLORS;\n  } else { // 默认为 implementation\n    statusMap = IMPLEMENTATION_STATUS;\n    colorMap = IMPLEMENTATION_STATUS_COLORS;\n  }\n\n  // 返回对应的颜色，如果找不到则返回 'default'\n  return colorMap[statusCode] || 'default';\n};\n\n/* 移除不再需要的 getNextStatusOptions 函数 */\n// /**\n//  * 获取下一个可能的状态选项\n//  * @param {string} currentStatus 当前状态\n//  * @param {string} type 状态类型，'review'或'implementation'\n//  * @returns {Array} 可选的下一状态列表，包含label和value\n//  */\n// export const getNextStatusOptions = (currentStatus, type = 'implementation') => {\n//   // 处理空状态，返回初始状态\n//   if (!currentStatus) {\n//     return [\n//       { value: '未开始', label: '未开始' },\n//       { value: '联系中', label: '联系中' }\n//     ];\n//   }\n  \n//   // 如果是直接的中文状态，使用预定义的转换提示\n//   const statusTransitionTips = {\n//     '未开始': ['联系中'],\n//     '联系中': ['实施中'],\n//     '实施中': ['已完成'],\n//     // '已完成': ['已评估'], // 移除评估\n//     // '已评估': []\n//   };\n  \n//   // 直接根据中文状态获取下一步状态\n//   if (typeof currentStatus === 'string' && /[\\u4e00-\\u9fa5]/.test(currentStatus)) {\n//     const nextStates = statusTransitionTips[currentStatus] || [];\n//     // 当前状态也加入选项\n//     return [\n//       { value: currentStatus, label: currentStatus },\n//       ...nextStates.map(state => ({ value: state, label: state }))\n//     ];\n//   }\n  \n//   // 如果是英文代码，先转换为中文，再获取下一步\n//   const statusText = getStatusDisplayText(currentStatus, 'implementation');\n//   const nextStates = statusTransitionTips[statusText] || [];\n  \n//   return [\n//     { value: statusText, label: statusText },\n//     ...nextStates.map(state => ({ value: state, label: state }))\n//   ];\n// };\n\n/* 移除不再需要的 validateStatusTransition 函数 */\n// /**\n//  * 验证状态流转是否有效\n//  * @param {string} fromStatus 当前状态\n//  * @param {string} toStatus 目标状态\n//  * @param {string} type 状态类型，'review'或'implementation'\n//  * @returns {boolean} 状态流转是否有效\n//  */\n// export const validateStatusTransition = (fromStatus, toStatus, type = 'implementation') => {\n//   // 如果状态相同，始终有效\n//   if (fromStatus === toStatus) return true;\n  \n//   // 预定义的状态流转规则 (移除评估)\n//   const statusTransitionTips = {\n//     '未开始': ['联系中'],\n//     '联系中': ['实施中'],\n//     '实施中': ['已完成'],\n//     '已完成': [],\n//     // '已评估': []\n//   };\n  \n//   // 获取当前状态的中文表示\n//   const fromStatusText = typeof fromStatus === 'string' && /[\\u4e00-\\u9fa5]/.test(fromStatus)\n//     ? fromStatus\n//     : getStatusDisplayText(fromStatus, 'implementation');\n    \n//   // 获取目标状态的中文表示\n//   const toStatusText = typeof toStatus === 'string' && /[\\u4e00-\\u9fa5]/.test(toStatus)\n//     ? toStatus\n//     : getStatusDisplayText(toStatus, 'implementation');\n  \n//   // 获取允许的下一步状态\n//   const allowedNextStates = statusTransitionTips[fromStatusText] || [];\n  \n//   return allowedNextStates.includes(toStatusText);\n// }; "],"names":["REVIEW_STATUS","PENDING_FIRST_REVIEW","PENDING_SECOND_REVIEW","APPROVED","REJECTED","REVIEW_STATUS_COLORS","REVIEW_STATUS_TRANSITIONS","IMPLEMENTATION_STATUS","NOT_STARTED","CONTACTING","IN_PROGRESS","DELAYED","COMPLETED","CANCELLED","IMPLEMENTATION_STATUS_TRANSITIONS","IMPLEMENTATION_STATUS_COLORS","SUGGESTION_STATUS","NOT_IMPLEMENTED","IMPLEMENTING","SUGGESTION_TYPES","SAFETY","ELECTRICAL","MECHANICAL","KEXIN_AUTOMATION","KEXIN_MONITORING","OTHER","REVIEW_LEVELS","FIRST_LEVEL","SECOND_LEVEL","REVIEW_RESULTS","PENDING","STATUS_COLORS","TYPE_COLORS","API_URL","suggestionService","getCreateData","async","api","get","error","console","submitSuggestion","log","formData","response","post","headers","undefined","_error$response","data","getSuggestions","params","arguments","length","queryString","URLSearchParams","toString","result","pagination","current","parseInt","page","pageSize","limit","total","Array","isArray","suggestions","warn","arrayProp","Object","entries","find","_ref","_","value","paginationProp","_ref2","key","paginationData","currentPage","size","totalCount","totalItems","_error$response2","message","getSuggestionById","id","validateSuggestionData","updateSuggestionStatus","status","comment","put","firstReview","approved","comments","_error$response3","secondReview","_error$response4","updateSuggestion","updateData","addComment","content","getAllSuggestions","axios","getSuggestion","createSuggestion","suggestionData","deleteSuggestion","delete","success","_error$response5","_error$response6","_error$response6$data","submitForReview","reviewSuggestion","reviewData","updateImplementation","implementationData","statusMap","updatePayload","evaluation","_error$response7","_error$response8","_error$response8$data","getImplementationStats","submitReview","scoreSuggestion","score","suggestion","implementation","_implementation$imple","responsiblePerson","implementer","name","startDate","plannedEndDate","plannedCompletionDate","actualEndDate","actualCompletionDate","notes","history","reviewStatus","implementationStatus","require","submitter","_id","map","user","createdAt","Date","toISOString","getStatusDisplayText","type","test","getStatusColor","colorMap","statusCode","_Object$entries$find","mapToSearch","foundCode"],"sourceRoot":""}